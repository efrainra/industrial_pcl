#! /usr/bin/env python

# set up parameters that we care about
PACKAGE = 'industrial_pcl_filters'

import roslib;
roslib.load_manifest (PACKAGE);
from dynamic_reconfigure.parameter_generator import *;

gen = ParameterGenerator()
# def add (self, name, paramtype, level, description, default = None, min = None, max = None, edit_method = ""):
gen.add ("filter_field_name", str_t, 0, "The field name used for filtering", "z")
gen.add ("filter_limit_min", double_t, 0, "The minimum allowed field value a point will be considered from", 0.0, -5.0, 5.0)
gen.add ("filter_limit_max", double_t, 0, "The maximum allowed field value a point will be considered from", 1.0, -5.0, 5.0)
gen.add ("keep_organized", bool_t, 0, "Set whether the filtered points should be kept and set to NaN, or removed from the PointCloud, thus potentially breaking its organized structure.", False)
gen.add ("input_frame", str_t, 0, "The input TF frame the data should be transformed into before processing, if input.header.frame_id is different.", "")
gen.add ("output_frame", str_t, 0, "The output TF frame the data should be transformed into after processing, if input.header.frame_id is different.", "")
gen.add ("topic", str_t, 0, "The topic that we are listening to for concatenating clouds (sensor_msgs::PointCloud2)", "")
gen.add ("search_radius", double_t, 0, "The searcg radius for the Moving Least Squares smoothing algorithm.", 0.003, 0.00, 0.99)
gen.add ("num_clouds", int_t, 0, "The number of clouds to concatenate", 3, 1, 15)
exit(gen.generate(PACKAGE, "industrial_pcl_filters", "ConcatenateMLS"))